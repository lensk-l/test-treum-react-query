import SearchBlock from "../components/search-block/SearchBlock";import ProductsList from "../components/products-list/ProductsList";import {useEffect, useState} from "react";import {useRouter} from "next/router";import Nav from "../components/Nav/Nav";import {dehydrate, QueryClient, useQuery} from "react-query";import axios from "axios";const getAllProducts = async () => await (await fetch('http://localhost:3000/api/products')).json();const Index = () => {    const {data} = useQuery('products', getAllProducts);    const [filteredProducts, setFilteredProducts] = useState(data);    const router = useRouter();    const handleSearch = (price, category) => {        const query = {};        if (price) {            query['amount'] = price        }        if (category) {            query['category'] = category        }        const getFiltered = (product) => {            if (category && product.category === category) {                return false;            }            if (Number(price) && product.amount > Number(price)) {                return false;            }            return true;        };        router.push({                pathname: '/',                query: query            },            undefined, {shallow: true}        )        setFilteredProducts(data.filter(getFiltered))    }    useEffect(() => {        let queryParams = '?'        if (router.query.amount) {            queryParams = queryParams.concat('amount=').concat(router.query.amount)        }        if (router.query.category) {            queryParams = queryParams.concat('&&category=').concat(router.query.category)        }        axios.get('http://localhost:3000/api/products' + queryParams).then(response => setFilteredProducts(response.data))    }, [])    return (        <>            <Nav/>            <SearchBlock onSearch={handleSearch}                         products={filteredProducts}/>            <ProductsList products={filteredProducts}/>        </>    );}export default Index;export async function getServerSideProps() {    const queryClient = new QueryClient();    await queryClient.prefetchQuery('products', getAllProducts);    return {        props: {            dehydratedState: dehydrate(queryClient)        }    }}